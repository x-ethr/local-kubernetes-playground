// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package users

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserAccountType string

const (
	UserAccountTypeMEMBER UserAccountType = "MEMBER"
	UserAccountTypeROOT   UserAccountType = "ROOT"
)

func (e *UserAccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserAccountType(s)
	case string:
		*e = UserAccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserAccountType: %T", src)
	}
	return nil
}

type NullUserAccountType struct {
	UserAccountType UserAccountType `json:"user-account-type"`
	Valid           bool            `json:"valid"` // Valid is true if UserAccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.UserAccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserAccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserAccountType), nil
}

func (e UserAccountType) Valid() bool {
	switch e {
	case UserAccountTypeMEMBER,
		UserAccountTypeROOT:
		return true
	}
	return false
}

func AllUserAccountTypeValues() []UserAccountType {
	return []UserAccountType{
		UserAccountTypeMEMBER,
		UserAccountTypeROOT,
	}
}

type UserVerificationStatus string

const (
	UserVerificationStatusVERIFIED UserVerificationStatus = "VERIFIED"
	UserVerificationStatusPENDING  UserVerificationStatus = "PENDING"
	UserVerificationStatusTIMEOUT  UserVerificationStatus = "TIMEOUT"
	UserVerificationStatusREVOKED  UserVerificationStatus = "REVOKED"
)

func (e *UserVerificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserVerificationStatus(s)
	case string:
		*e = UserVerificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserVerificationStatus: %T", src)
	}
	return nil
}

type NullUserVerificationStatus struct {
	UserVerificationStatus UserVerificationStatus `json:"user-verification-status"`
	Valid                  bool                   `json:"valid"` // Valid is true if UserVerificationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserVerificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserVerificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserVerificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserVerificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserVerificationStatus), nil
}

func (e UserVerificationStatus) Valid() bool {
	switch e {
	case UserVerificationStatusVERIFIED,
		UserVerificationStatusPENDING,
		UserVerificationStatusTIMEOUT,
		UserVerificationStatusREVOKED:
		return true
	}
	return false
}

func AllUserVerificationStatusValues() []UserVerificationStatus {
	return []UserVerificationStatus{
		UserVerificationStatusVERIFIED,
		UserVerificationStatusPENDING,
		UserVerificationStatusTIMEOUT,
		UserVerificationStatusREVOKED,
	}
}

type User struct {
	ID                 int64                  `db:"id" json:"id"`
	Name               *string                `db:"name" json:"name"`
	DisplayName        *string                `db:"display-name" json:"display-name"`
	AccountType        UserAccountType        `db:"account-type" json:"account-type"`
	Email              string                 `db:"email" json:"email"`
	Username           *string                `db:"username" json:"username"`
	Avatar             *string                `db:"avatar" json:"avatar"`
	VerificationStatus UserVerificationStatus `db:"verification-status" json:"verification-status"`
	Marketing          bool                   `db:"marketing" json:"marketing"`
	Creation           pgtype.Timestamptz     `db:"creation" json:"creation"`
	Modification       pgtype.Timestamptz     `db:"modification" json:"modification"`
	Deletion           pgtype.Timestamptz     `db:"deletion" json:"deletion"`
}
