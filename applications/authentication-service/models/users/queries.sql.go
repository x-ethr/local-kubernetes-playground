// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package users

import (
	"context"
)

const all = `-- name: All :one
SELECT count(*) FROM "User"
`

// All returns the total number of User records, including deleted record(s).
func (q *Queries) All(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, all)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const attributes = `-- name: Attributes :one
SELECT id, email, password, creation, modification, deletion
FROM "User"
WHERE (id) = $1::bigserial
  AND (deletion) IS NULL
LIMIT 1
`

// Attributes will use the user's [User.ID] to hydrate all available User attribute(s). Note that the following call is more taxing on the database.
func (q *Queries) Attributes(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRow(ctx, attributes, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Creation,
		&i.Modification,
		&i.Deletion,
	)
	return i, err
}

const count = `-- name: Count :one
SELECT count(*) FROM "User" WHERE (email) = $1::text AND (deletion) IS NULL
`

// Count returns 0 or 1 depending on if a User record matching the provided email exists.
func (q *Queries) Count(ctx context.Context, db DBTX, email string) (int64, error) {
	row := db.QueryRow(ctx, count, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO "User" (email, password) VALUES ($1, $2) RETURNING id, email
`

type CreateParams struct {
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"-"`
}

type CreateRow struct {
	ID    int64  `db:"id" json:"id"`
	Email string `db:"email" json:"email"`
}

func (q *Queries) Create(ctx context.Context, db DBTX, arg *CreateParams) (CreateRow, error) {
	row := db.QueryRow(ctx, create, arg.Email, arg.Password)
	var i CreateRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const get = `-- name: Get :one
SELECT email, password FROM "User" WHERE email = $1
`

type GetRow struct {
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"-"`
}

func (q *Queries) Get(ctx context.Context, db DBTX, email string) (GetRow, error) {
	row := db.QueryRow(ctx, get, email)
	var i GetRow
	err := row.Scan(&i.Email, &i.Password)
	return i, err
}

const list = `-- name: List :many
SELECT id, email, password, creation, modification, deletion FROM "User" WHERE (deletion) IS NULL
`

// List returns all active User record(s).
func (q *Queries) List(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.Query(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Creation,
			&i.Modification,
			&i.Deletion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const total = `-- name: Total :one
SELECT count(*) FROM "User" WHERE (deletion) IS NULL
`

// Total returns the total number of User records, excluding deleted record(s).
func (q *Queries) Total(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, total)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const users = `-- name: Users :many
SELECT id, email, password, creation, modification, deletion FROM "User"
`

// Users returns all User record(s).
func (q *Queries) Users(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.Query(ctx, users)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Creation,
			&i.Modification,
			&i.Deletion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
