// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package associations

import (
	"context"
)

const rolePermissions = `-- name: RolePermissions :many
SELECT id, "role-id", "permission-id" FROM "Role-Permission"
`

// RolePermissions returns all RolePermission record(s).
func (q *Queries) RolePermissions(ctx context.Context) ([]*RolePermission, error) {
	rows, err := q.db.Query(ctx, rolePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userRoles = `-- name: UserRoles :many
SELECT id, "role-id", "permission-id" FROM "Role-Permission"
`

// UserRoles returns all UserRole record(s).
func (q *Queries) UserRoles(ctx context.Context) ([]*RolePermission, error) {
	rows, err := q.db.Query(ctx, userRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RolePermission{}
	for rows.Next() {
		var i RolePermission
		if err := rows.Scan(&i.ID, &i.RoleID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
